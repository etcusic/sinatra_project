BLOG   (ideas & notes)

RESTful Routes:
- Structure:
    - Routes depend on BOTH the HTTP verb and the URL
    - 'get' => erb (use this to create instance variables that can be passed to the erb page and used within that page)
    - 'post/patch/delete' => redirect (use instance variable passed through params to direct the route: redirect '/users/#{@user.id})
- Order of CRUD routes (get/index, get/new, post, get/id, get/id/edit, patch/id/edit, delete/id/edit)


Memoization: 
- Or-Equals Operator (||=) 
    - value ||= expensive_method(123)
    - ### logically equivalent to ###
    - value = (value || expensive_method(123))
- Put simply, memoization is saving a method's return value so it does not have to be recomputed each time. 
    As with all caching, you are effectively trading memory for time (i.e. you give up the memory required to store the value, 
    but you save the time required to process the method).
Links:
- https://www.honeybadger.io/blog/ruby-rails-memoization/


Salting & Hashing => User Authentication with bcrypt
Links:
- https://medium.com/swlh/understanding-whats-happening-under-the-hood-with-source-codes-and-existing-methods-3bca47cb5757
- https://medium.com/@chanwingkeihaha/validation-error-message-and-helper-method-in-sinatra-ruby-ff94de453990


Validates => Active Record (valid?)
Links:
- https://guides.rubyonrails.org/active_record_validations.html